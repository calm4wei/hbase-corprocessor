package com.cobub;

import com.cobub.server.coprocessor.autogenerated.Sum;
import com.google.protobuf.ServiceException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.HBaseConfiguration;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.hbase.client.*;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.BlockingRpcCallback;
import org.apache.hadoop.hbase.util.Bytes;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;

/**
 * Created by feng.wei on 2015/12/18.
 */
public class CoProTest {

    HTable hTable;

    String observerAdmin = "admin001";

    @Before
    public void init() throws IOException {
        Configuration conf = HBaseConfiguration.create();
        conf.set("hbase.zookeeper.quorum", "zqykjdev14");
        conf.setInt("hbase.zookeeper.property.clientPort", 2181);
        //        conf.set("table", "wf:test");
        //        conf.set("column", "count");
        //        conf.set("targets", "newTarget");
        hTable = new HTable(conf, "wf:employee");
    }

    @Test
    public void test_oberserve_put() throws IOException {
        Put put = new Put(Bytes.toBytes("u001"));
        put.add(Bytes.toBytes("f"), Bytes.toBytes("gross"), Bytes.toBytes(100));
        hTable.put(put);

    }

    @Test
    public void test_delete() throws IOException {
        Delete delete = new Delete(Bytes.toBytes("ADMIN"));
        hTable.delete(delete);
    }

    @Test
    public void test_observer_get() throws IOException {
        Get get = new Get(Bytes.toBytes(observerAdmin));
        Result result = hTable.get(get);
        String row = Bytes.toString(result.getRow());
        System.out.println("row=" + row);
        for (Cell cell : result.listCells()) {
            System.out.println("    family:" + Bytes
                    .toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength()));
            System.out.println("    column:" + Bytes
                    .toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength()));
            System.out.println(
                    "    value:" + Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength()));

        }
    }

    @Test
    public void test_observer_scan() throws IOException {
        Scan scan = new Scan();
        ResultScanner scanner = hTable.getScanner(scan);
        Result result = null;
        while (null != (result = scanner.next())) {
            String row = Bytes.toString(result.getRow());
            System.out.println("row=" + row);
            for (Cell cell : result.listCells()) {
                System.out.println("    family:" + Bytes
                        .toString(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength()));
                System.out.println("    column:" + Bytes
                        .toString(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength()));
                System.out.println(
                        "    value:" + Bytes.toString(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength()));

            }
        }
    }

    @Test
    public void test_endpoint_example() throws IOException {

        final Sum.SumRequest request = Sum.SumRequest.newBuilder().setFamily("f").setColumn("gross")
                .build();
        try {
            Map<byte[], Long> results = hTable.coprocessorService (Sum.SumService.class, null, null,
                    new Batch.Call<Sum.SumService, Long>() {
                        @Override
                        public Long call(Sum.SumService aggregate) throws IOException {
                            BlockingRpcCallback rpcCallback = new BlockingRpcCallback();
                            aggregate.getSum(null, request, rpcCallback);
                            Sum.SumResponse response = (Sum.SumResponse) rpcCallback.get();
                            return response.hasSum() ? response.getSum() : 0L;
                        }
                    });
            for (Long sum : results.values()) {
                System.out.println("Sum = " + sum);
            }
        } catch (ServiceException e) {
            e.printStackTrace();
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    @After
    public void close() throws IOException {
        hTable.close();
    }
}
